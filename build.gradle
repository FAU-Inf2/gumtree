allprojects {
	group = 'com.github.gumtreediff'
	version = '2.1.0-SNAPSHOT'
	ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

	repositories {
		mavenCentral()
		jcenter()
	}
}

subprojects {
	apply plugin: 'java'
	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'

	apply plugin: 'checkstyle'
	checkstyle {
		toolVersion = '6.12.1'
		configFile = rootProject.file('gumtree_checkstyle.xml')
		configProperties = [suppressionFile: "${rootProject.file('checkstyle_ignore.xml')}"]
	}

	dependencies {
		testCompile 'junit:junit:4.+'
	}

	apply plugin: 'jacoco'
	jacoco {
		toolVersion = '0.7.1.201405082137'
	}

	jacocoTestReport {
		additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
		sourceDirectories = files(sourceSets.main.allSource.srcDirs)
		classDirectories =	files(sourceSets.main.output)
		reports {
			html.enabled = true
			xml.enabled = false
			csv.enabled = false
		}
	}
}

evaluationDependsOnChildren();

configure(subprojects.findAll {it.name != 'core'}) {
	dependencies {
		compile project(':core')
	}
}
configure(subprojects.findAll {it.name.startsWith('gen.antlr')}) {
	apply plugin: 'antlr'

	dependencies {
		antlr 'org.antlr:antlr:3.5.2'
	}
}
configure(subprojects.findAll {it.name.startsWith('gen.antlr-')}) {
	dependencies {
		compile project(':gen.antlr')
	}
}

configure(subprojects.findAll {!it.name.equals('gumtree-all')}) { subproject ->
	apply plugin: 'maven'
	apply plugin: 'signing'
	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}
	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
	artifacts {
		archives javadocJar, sourcesJar
	}
	signing {
		required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
		sign configurations.archives
	}
	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: hasProperty('ossrhUsername')?ossrhUsername:'', password: hasProperty('ossrhPassword')?ossrhPassword:'')
				}
				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: hasProperty('ossrhUsername')?ossrhUsername:'', password: hasProperty('ossrhPassword')?ossrhPassword:'')
				}
				pom.project {
					name "GumTree ${subproject.name}"
					description subproject.description
					url 'https://github.com/GumTreeDiff/gumtree/'
					packaging 'jar'
					scm {
						connection 'scm:git:https://github.com/GumTreeDiff/gumtree/'
						developerConnection 'scm:git:https://github.com/GumTreeDiff/gumtree/'
						url 'https://github.com/GumTreeDiff/gumtree/'
					}
					licenses {
						license {
							name 'GNU Lesser General Public License v3.0'
							url 'https://www.gnu.org/copyleft/lesser.html'
						}
					}
					developers {
						developer {
							id 'jre'
							name 'Jean-Rémy Falleri'
							email 'jr.falleri@gmail.com'
						}
						developer {
							id 'flop'
							name 'Floréal Morandat'
							email 'florealm@gmail.com'
						}
					}
				}
			}
		}
	}
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	dependsOn = subprojects.test
	additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
	sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
	classDirectories = files(subprojects.sourceSets.main.output)
	executionData = files(subprojects.jacocoTestReport.executionData)
	reports {
		html.enabled = true
		xml.enabled = false
		csv.enabled = false
	}
	onlyIf = {
		true
	}
	doFirst {
		executionData = files(executionData.findAll {
				it.exists()
		})
	}
}
